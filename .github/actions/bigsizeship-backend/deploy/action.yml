name: Deploy stack

inputs:
  IMAGE_TAG:
    description: The Docker image tag to deploy
    required: false
    default: latest
  STACK_NAME:
    description: The service to use in Cloud Run (will be created if not exists)
    required: true
  ENV:
    type: choise
    description: "Optional environment"
    required: false
    options: 
      - stag
      - prod
  PROJECT_NAME:
    description: 'PROJECT NAME (Ex: bigsizeship-backend)'
    required: true

runs:
  using: composite
  steps:
    - name: Login to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}
#          password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull Docker Image
      shell: bash
      id: pull
      run: |
        image=ghcr.io/${{ github.repository }}
        docker pull $image:${{ inputs.IMAGE_TAG }}

    - name: Run/Update stack services
      shell: bash
      run: |
        # Add commands to run tests on the deployed services
        docker_compose_yml="docker-compose.${{ inputs.ENV }}.yml"
        compose_files=(
            "$PWD/docker-swarm/${{ inputs.PROJECT_NAME }}/global/efk/fluent-bit/docker-compose.yml"
            $([ ${{ inputs.ENV }} == "stag" ] && echo "$PWD/docker-swarm/${{ inputs.PROJECT_NAME }}/postgres/docker-compose.yml")
            "$PWD/docker-swarm/${{ inputs.PROJECT_NAME }}/global/redis/docker-compose.yml"
            "$PWD/docker-swarm/${{ inputs.PROJECT_NAME }}/strapi/${{ inputs.ENV }}/docker-compose.yml"
        )

        compose_yml=""
        for file in "${compose_files[@]}"; do
            compose_yml="${compose_yml:+${compose_yml} }-c ${file}"
        done
        echo "Compose yml files: ${compose_yml}"

        docker stack deploy -c ./docker-swarm/${{ inputs.PROJECT_NAME }}/${{ inputs.ENV }}/reverse-proxy-traefik/docker-compose.yml --prune ${{ inputs.STACK_NAME }}_proxy

        docker stack config ${compose_yml} > ${docker_compose_yml}

        docker stack deploy -c ${docker_compose_yml} --prune --with-registry-auth ${{ inputs.STACK_NAME }}

        docker service ls

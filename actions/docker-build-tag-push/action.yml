# https://blog.derlin.ch/github-actions-reusable-workflow-docker-images

name: Build, tag, push docker image
description: Build, tag & push docker image

inputs:
  publish_to_github_cr:
    type: boolean
    description: | 
      Whether to publish the image to Github Container Registry.
    required: false
    default: false
  docker_context:
    description: "Optional input to set docker context."
    required: false
    default: "."
  docker_platforms:
    description: "Optional input list to set docker target platforms for build."
    required: false
    default: "linux/amd64"
  no_cache:
    description: "Optional input to not use cache when building the image."
    required: false
    default: "false"

outputs: 
  image-tag:
    description: "Output image tag"
    value: ${{ steps.image-tag.outputs.image-tag }}

runs: 
  using: composite
  steps:
    name: Build docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU 
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Github container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: github-metadata
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{ version }},value=${{ inputs.version }}
            type=ref,prefix=,suffix=-{{ sha }},event=tag
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/') }}
          flavor: |
            latest=false


      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: ${{ inputs.docker_context }}
          platforms: ${{ inputs.docker_platforms }}
          push: ${{ inputs.publish_to_github_cr }}
          tags: ${{ steps.github-metadata.outputs.tags }}
          labels: ${{ steps.github-metadata.outputs.labels }}
          no-cache: ${{ inputs.no_cache }}
          file: ${{  }}
          # use layer caching. Don't forget mode=max to also cache the build image
          # (vs only the final image - mode: min)
          cache-from: type=gha
          cache-to: type=gha,mode=max,ignore-error=true

      - name: Output image tag
        id: image-tag
        shell: bash
        run: echo "image-tag=${{ steps.github-metadata.outputs.tags }}" >> $GITHUB_OUTPUT